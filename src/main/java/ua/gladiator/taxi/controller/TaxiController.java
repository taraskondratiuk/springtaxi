package ua.gladiator.taxi.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import ua.gladiator.taxi.model.entity.Car;
import ua.gladiator.taxi.model.entity.Client;
import ua.gladiator.taxi.model.service.impl.CarService;
import ua.gladiator.taxi.model.service.impl.ClientService;

import javax.validation.Valid;
import java.util.ArrayList;
import java.util.List;

@Controller

@RequestMapping(path = "/")
public class TaxiController {

    private final ClientService clientService;
    private final CarService carService;

    @Autowired
    public TaxiController(ClientService clientService, CarService carService) {
        this.clientService = clientService;
        this.carService = carService;
    }

    @RequestMapping(value = {"/", "/index"}, method = RequestMethod.GET)
    public String index() {
        List<Car> list = carService.getAll();
        Car c = list.get(0);
        System.out.println("___________________________________");
        System.out.println(c.getType());
        System.out.println(c.getIdcars());
        System.out.println(c.getIs_aviliable());
        System.out.println(c.getMake());
        System.out.println(c.getPlace());

        return "index";
    }


    @RequestMapping("/login")
    public String getLogin(@RequestParam(value = "error", required = false) String error,
                           @RequestParam(value = "logout", required = false) String logout,
                           Model model) {
        model.addAttribute("error", error != null);
        model.addAttribute("logout", logout != null);
        return "login";
    }

    /*@RequestMapping("/register")
    public String getReg(@RequestParam(value = "error", required = false) String error,
                           Model model,
                         Client client) {
        model.addAttribute("error", error != null);
        model.addAttribute("client", client);
        return "register";
    }*/


    @GetMapping("/register")
    public String regGet(Model model) {
        model.addAttribute("client", new Client());
        return "register";
    }

    @PostMapping("/register")
    public String regPost(@Valid Client client, BindingResult bindingResult, Model model) {
        //if (!bindingResult.hasErrors()) {


        if (!bindingResult.hasErrors()) {
            if (clientService.isRegistered(client.getLogin())) {
                model.addAttribute("login_error", true);
                return "register";
            }
            model.addAttribute("noErrors", true);

        }

        //}
        model.addAttribute("client", client);
        clientService.registerClient(client);
        return "register";
    }

    @GetMapping(path = "/hello")
    public String hello() {
        return "hello";
    }


    /* // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private ClientRepository clientRepository;

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody
    String addNewUser (@RequestParam String login,
                       @RequestParam String password,
                       @RequestParam String socialStatus,
                       @RequestParam BigDecimal totalSpentValue,
                       @RequestParam String userType,
                       @RequestParam Integer personalDiscount
                       ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Client n = new Client();
        n.setLogin(login);
        n.setPassword(password);
        n.setPersonalDiscount(personalDiscount);
        n.setSocialStatus(SocialStatus.valueOf(socialStatus));
        n.setTotalSpentValue(totalSpentValue);
        n.setUserType(userType);
        clientRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Client> getAllClients() {
        // This returns a JSON or XML with the users
        return clientRepository.findAll();
    }*/
}
